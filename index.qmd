---
# pagetitle: "Turing"
toc: false
page-layout: full
section-divs: false
hide-description: true
listing:
- id: news
  contents:
    - "news/posts/*/index.qmd"
  sort: date desc
  type: grid
  grid-columns: 3
  categories: false
  sort-ui: false
  filter-ui: false
  fields: [title, description, date]
  max-items: 3
  image-height: "200"
description: |
  Turing.jl is a probabilistic programming language and Bayesian modelling framework for the Julia programming language.
---

```{=html}
<div class="d-flex flex-column align-items-center gap-0" style="padding:6rem 0;">
  <image src="assets/images/turing-logo.svg" width="150px" alt="Three normal probability distributions">
  <span style="font-size:4rem;font-weight:700;">
    Turing.jl
  </span>
  <span class="display-6 d-block text-center pb-4 display-md-5 display-lg-4">
    Bayesian inference with probabilistic programming
  </span>
  <div class="d-flex flex-row flex-wrap panel-wrapper gap-2">
    <a href="https://turinglang.org/docs/tutorials/docs-00-getting-started/" class="button--fill btn">
      Tutorials
    </a>
    <a href="/library" class="button btn">
      Ecosystem
    </a>
    <a href="https://github.com/TuringLang" class="button btn">
      View on GitHub
    </a>
  </div>
</div>
<div class="d-flex flex-row flex-wrap panel-wrapper gap-4 section-end-space">
  <div class="panel">
    <div class="panel-title">
      Intuitive
    </div>
    Turing models are easy to write and communicate â€” syntax is close to mathematical notations. 
  </div>
  <div class="panel">
    <div class="panel-title">
      General-purpose
    </div>
    Turing supports models with discrete parameters and stochastic control flow. 
  </div>
  <div class="panel">
    <div class="panel-title">
      Modular & composable
    </div>
    Turing is modular, written entirely in Julia, and is interoperable with the powerful Julia ecosystem.
  </div>
</div>
```

<div class="d-flex flex-row flex-wrap panel-wrapper gap-3 pb-2">
<div class="example-text" style="text-align:right;padding:0.5rem;">
  <div class="fs-4 fw-bold pb-1">
  Hello, World in Turing
  </div>
  Some text about how easy it is to [get going](https://turinglang.org/docs/tutorials/00-introduction/).
</div>
<div class="example-code">
```julia
@model function coinflip(; N::Int)
    # Prior belief about the probability of heads
    p ~ Beta(1, 1)

    # Heads or tails of a coin are drawn from `N`
    # Bernoulli distributions with success rate `p`
    y ~ filldist(Bernoulli(p), N)

    return y
end;
```
</div>
</div>
<div class="d-flex flex-row-reverse flex-wrap panel-wrapper gap-3 pt-2 section-end-space">
<div class="example-text" style="padding:0.5rem;">
  <div class="fs-4 fw-bold pb-1">
  Goodbye, World in Turing
  </div>
  Some text about how easy it is to interface with external packages like AbstractGPs. Learn more about modelling [Gaussian Processes](https://turinglang.org/docs/tutorials/15-gaussian-processes/) with Turing.jl.
</div>
<div class="example-code">
```julia
@model function putting_model(d, n; jitter=1e-4)
    v ~ Gamma(2, 1)
    l ~ Gamma(4, 1)
    f = GP(v * with_lengthscale(SEKernel(), l))
    f_latent ~ f(d, jitter)
    binomials = Binomial.(n, logistic.(f_latent))
    y ~ product_distribution(binomials)
    return (fx=f(d, jitter), f_latent=f_latent, y=y)
end
```
</div>
</div>

```{=html}
<div class="pb-3 fs-2 fw-bold">
  News
</div>
```
::: {#news}

:::

[See all news &rarr;](news/)
