---
toc: false
page-layout: full
section-divs: false
hide-description: true
description: |
  Turing.jl is a probabilistic programming language and Bayesian modelling framework for the Julia programming language.
---

{{< include _includes/header.qmd >}}

::::: {.d-flex .flex-row .flex-wrap .panel-wrapper .gap-4 .section-end-space}

::: {.panel}
##### Expressive {.panel-title .pb-1}
Turing models are easy to write and communicate — their syntax closely resembles mathematical notation.
:::

::: {.panel}
##### General-purpose {.panel-title .pb-1}
Turing supports models with discrete parameters and stochastic control flow.
:::

::: {.panel}
##### Composable {.panel-title .pb-1}
Turing is written entirely in Julia, and is interoperable with its powerful ecosystem.
:::

:::::


::::: {.d-flex .flex-row .flex-wrap .panel-wrapper .gap-3 .pb-2}

::: {.example-text style="text-align:right;padding:0.5rem;"}

<div class="fs-4 fw-bold pb-1">Intuitive syntax</div>

The [modelling syntax of Turing.jl](https://turinglang.org/docs/core-functionality) closely resembles the mathematical specification of a probabilistic model.
For example, the following model describes a coin flip experiment with `N` flips, where `p` is the probability of heads.

```math
\begin{align*}
p &\sim \text{Beta}(1, 1) \\
y_i &\sim \text{Bernoulli}(p) \quad \text{for } i = 1, \ldots, N
```

:::

::: {.example-code style="overflow-x: scroll;"}
```{.julia .code-overflow-scroll}
# Define the model
@model function coinflip(; N::Int)
    p ~ Beta(1, 1)
    y ~ filldist(Bernoulli(p), N)
end

# Condition on data
data = [0, 1, 1, 0, 1]
model = coinflip(; N = length(data)) | (; y = data)
```
:::

:::::

::::: {.d-flex .flex-row-reverse .flex-wrap .panel-wrapper .gap-3 .pt-2 .section-end-space}

::: {.example-text style="padding:0.5rem;"}

<div class="fs-4 fw-bold pb-1">Flexible parameter inference</div>

Turing.jl provides full support for sampling one or more MCMC chains from the posterior distribution, including options for parallel sampling.

Variational inference and point estimation methods are also available.

:::

::: {.example-code style="overflow-x: scroll;"}
```{.julia .code-overflow-scroll}
# Sample one chain
chain = sample(model, NUTS(), 1000)

# Sample four chains, one per thread
# Note: to obtain speedups, Julia must be started
# with multiple threads enabled, e.g. `julia -t 4`
chains = sample(model, NUTS(), MCMCThreads(), 1000, 4)
```
:::

:::::


::::: {.d-flex .flex-row .flex-wrap .panel-wrapper .gap-3 .pb-2}

::: {.example-text style="text-align:right;padding:0.5rem;"}

<div class="fs-4 fw-bold pb-1">MCMC sampling algorithms</div>

A number of MCMC sampling algorithms are available in Turing.jl, including (but not limited to) HMC, NUTS, Metropolis–Hastings, particle samplers, and Gibbs.

Turing.jl also supports ['external samplers'](https://turinglang.org/docs/usage/external-samplers/) which conform to the AbstractMCMC.jl interface, meaning that users can implement their own algorithms.

:::

::: {.example-code style="overflow-x: scroll;"}
```{.julia .code-overflow-scroll}
sample(model, NUTS(), 1000)

sample(model, MH(), 1000)

using SliceSampling
sample(model, externalsampler(SliceSteppingOut(2.0)), 1000)
```
:::

:::::

::::: {.d-flex .flex-row-reverse .flex-wrap .panel-wrapper .gap-3 .pt-2 .section-end-space}

::: {.example-text style="padding:0.5rem;"}

<div class="fs-4 fw-bold pb-1">Composability with Julia</div>

As Turing.jl models are simply Julia functions under the hood, they can contain arbitrary Julia code.

For example, [differential equations](https://turinglang.org/docs/tutorials/bayesian-differential-equations/) can be added to a model using `DifferentialEquations.jl`, which is a completely independent package.

:::

::: {.example-code style="overflow-x: scroll;"}
```{.julia .code-overflow-scroll}
using DifferentialEquations

# Define the system of equations
function lotka_volterra(du, u, params, t)
    α, β, δ, γ = params
    x, y = u
    du[1] = (α * x) - (β * x * y)
    du[2] = (δ * x * y) - (γ * y)
end
prob = ODEProblem(lotka_volterra, ...)

# Use it in a model
@model function fit_lotka_volterra()
    # Priors
    α ~ Normal(0, 1)
    # ...

    # Solve the ODE
    predictions = solve(prob, Tsit5(); p=p)

    # Likelihood
    data ~ Poisson.(predictions, ...)
end
```
:::

:::::

{{< include _includes/news.qmd >}}

```{=html}
<h3 class="pb-3 section-start-space">
  Learn more
</h3>
<div class="list grid quarto-listing-cols-3">
  <a class="pseudolisting" href="/library">
    <div class="card-title h5">
      Ecosystem
    </div>
    <p class="quarto-grid-item">
      Learn about all the packages that are part of the TuringLang organization.
    </p>
  </a>
  <a class="pseudolisting" href="https://turinglang.org/docs/tutorials/docs-00-getting-started/">
    <div class="card-title h5">
      Documentation
    </div>
    <p class="quarto-grid-item">
      Familiarize yourself with the mechanics of Turing.jl.
    </p>
  </a>
  <a class="pseudolisting" href="https://turinglang.org/docs/tutorials/00-introduction/">
    <div class="card-title h5">
      Official tutorials
    </div>
    <p class="quarto-grid-item">
      Learn to tackle specific modelling problems with Turing.jl.
    </p>
  </a>
</div>
```

<!-- TODO

::: {.section-start-space}

### Algorithms

Placeholder text introducing this section on algorithms.

| Column 1 | Column 2 | Column 3 | Column 4 |
|----------|----------|----------|----------|
|  Entry A |  Entry D |  Entry G |  Entry J |
|  Entry B |  Entry E |  Entry H |  Entry K |
|  Entry C |  Entry F |  Entry I |  Entry L |

: Supported MCMC and other learning algorithms {.striped .borderless}

:::

::: {.section-start-space}

### Bayesian Workflow

Placeholder text introducing the Bayesian Workflow diagram from the ACM special issue submission.

```{=html}
<div style="text-align:center;">
<img src="https://i0.wp.com/www.honeybeesuite.com/wp-content/uploads/2019/09/Multiple-teeth-HBS.jpg?w=400&ssl=1" style="margin:0.5rem 0;border-radius:10pt">
<p>An example of the Beeysian workflow.</p>
</div>
```

:::

-->

<!-- TODO

```{=html}
<div class="d-flex flex-row panel-wrapper gap-3 section-start-space">
<div class="flex-grow-1">
<h3>Talks</h3>
  <p>Placeholder for intro text on list of talks which are available online</p>
  <ul>
    <li>Talk 1
    <li>Talk 2
    <li>Talk 3
  </ul>
</div>
<div class="flex-grow-1">
  <h3>Other resources</h3>
  <p>This list contains a few other written resources for learning Turing. If you have written something and would like to share it with the community, please <a href="https://github.com/TuringLang/docs/issues/new">get in touch</a>!</p>
  <ul>
    <li><a href="https://github.com/StatisticalRethinkingJulia/SR2TuringPluto.jl">Statistical Rethinking</a>
    <li><a href="https://storopoli.github.io/Turing-Workshop/">Jose Storopoli's Turing workshop (outdated in parts)</a>
    <li><a href="https://storopoli.github.io/Bayesian-Julia/">Jose Storopoli's blog on Turing and Bayesian Statistics</a>
    <li>Placeholder for more...
  </ul>
</div>
</div>
``` 
-->

<div class="section-start-space">

{{< include _includes//citation/cite.qmd >}}

</div>
