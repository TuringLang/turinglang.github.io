```{=html}
<div class="citation-container">
  <h3 id="cite" class="pb-1 text-center">Turing.jl is an <a href="https://github.com/TuringLang/Turing.jl/blob/main/LICENCE" class="turing-license-link"><code>MIT</code></a> Licensed Open Source Project</h3>
  <p class="text-center">If you use Turing.jl in your research, please consider citing our papers.</p>
 
  <ul id="citation-list" class="citation-list"> 
    <!-- Citations will be dynamically injected here -->
  </ul>
</div>

<script>
// DATA: Add new BibTeX entries here
const bibtexData = [
`@article{Fjelde2025Turing,
  author    = {Fjelde, Tor Erlend and Xu, Kai and Widmann, David and Tarek, Mohamed and Pfiffer, Cameron and Trapp, Martin and Axen, Seth D. and Sun, Xianda and Hauru, Markus and Yong, Penelope and Tebbutt, Will and Ghahramani, Zoubin and Ge, Hong},
  title     = {Turing.jl: a general-purpose probabilistic programming language},
  journal   = {ACM Transactions on Probabilistic Machine Learning},
  year      = {2025},
  publisher = {Association for Computing Machinery},
  doi       = {10.1145/3711897},
  note      = {Just Accepted},
  url       = {https://doi.org/10.1145/3711897}
}`,
`@inproceedings{Ge2018Turing,
  author    = {Ge, Hong and Xu, Kai and Ghahramani, Zoubin},
  title     = {Turing: a language for flexible probabilistic inference},
  booktitle = {Proceedings of the 21st International Conference on Artificial Intelligence and Statistics (AISTATS)},
  series    = {Proceedings of Machine Learning Research},
  volume    = {84},
  pages     = {1682--1690},
  year      = {2018},
  publisher = {PMLR},
  url       = {http://proceedings.mlr.press/v84/ge18b.html}
}`
];

/**
 * A BibTeX parser.
 * Extracts key-value pairs from a BibTeX string.
 * @param {string} bibtex - The raw BibTeX string.
 * @returns {object} - An object with parsed data.
 */
function parseBibtex(bibtex) {
    const data = { raw: bibtex };
    const regex = /(\w+)\s*=\s*[\{"']([^"'}]+)[\}"']/g;
    let match;
    while ((match = regex.exec(bibtex)) !== null) {
        data[match[1].toLowerCase()] = match[2];
    }
    return data;
}

/**
 * Creates an HTML string for a single citation entry.
 * @param {object} bibData - The parsed BibTeX data.
 * @returns {string} - The HTML string for the list item.
 */
function generateCitationHTML(bibData) {
    const { author, title, journal, booktitle, year, note, url, doi, raw } = bibData;

    let publicationInfo = '';
    if (journal) {
        publicationInfo += `<em>${journal}</em>.`;
    } else if (booktitle) {
        publicationInfo += `In <em>${booktitle}</em>.`;
    }
    if (note) {
        publicationInfo += ` ${note}.`;
    }
    
    const viewUrl = url || (doi ? `https://doi.org/${doi}` : '#');
    
    // The author string is now used directly from the bibtex data without formatting.
    const authorsFormatted = author || 'N/A';

    return `
    <li class="citation-entry box">
      <div class="citation-content">
        <p class="citation-text">
          ${authorsFormatted} (${year}). <span class="citation-title">${title}.</span> ${publicationInfo}
        </p>
      </div>
      <div class="citation-actions">
        <a href="${viewUrl}" target="_blank" rel="noopener noreferrer" class="citation-icon-btn" aria-label="View Paper: ${title}">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"/><path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"/></svg>
        </a>
        <button class="citation-icon-btn copy-bibtex-btn" aria-label="Copy BibTeX for ${title}">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/></svg>
        </button>
      </div>
      <pre class="citation-bibtex-data" style="display:none;">${raw}</pre>
    </li>
    `;
}

function copyBibtex(buttonElement) {
  const citationEntry = buttonElement.closest('.citation-entry');
  if (!citationEntry) return;

  const bibtexPreElement = citationEntry.querySelector('.citation-bibtex-data');
  if (!bibtexPreElement) return;
  
  const bibtexText = bibtexPreElement.textContent.trim();

  if (navigator.clipboard && window.isSecureContext) {
    navigator.clipboard.writeText(bibtexText)
      .then(() => showSuccess(buttonElement))
      .catch(err => {
        console.error('Async copy failed, falling back:', err);
        fallbackCopy(bibtexText, buttonElement);
      });
  } else {
    fallbackCopy(bibtexText, buttonElement);
  }
}

function fallbackCopy(text, buttonElement) {
  const textArea = document.createElement('textarea');
  textArea.value = text;
  textArea.style.position = 'fixed';
  textArea.style.top = '-9999px';
  textArea.style.left = '-9999px';
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();
  try {
    const successful = document.execCommand('copy');
    if (successful) {
      showSuccess(buttonElement);
    } else {
      showError(buttonElement);
    }
  } catch (err) {
    console.error('Fallback copy failed:', err);
    showError(buttonElement);
  }
  document.body.removeChild(textArea);
}

function showSuccess(buttonElement) {
    const originalIcon = buttonElement.innerHTML;
    buttonElement.innerHTML = 'âœ“';
    buttonElement.classList.add('citation-copied');
    buttonElement.disabled = true;

    setTimeout(() => {
        buttonElement.innerHTML = originalIcon;
        buttonElement.classList.remove('citation-copied');
        buttonElement.disabled = false;
    }, 2000);
}

function showError(buttonElement) {
    const originalIcon = buttonElement.innerHTML;
    buttonElement.innerHTML = 'X';
    buttonElement.disabled = true;
    setTimeout(() => {
        buttonElement.innerHTML = originalIcon;
        buttonElement.disabled = false;
    }, 2000);
}

document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('citation-list');
    if (!container) return;

    // Generate and inject HTML
    const allCitationsHTML = bibtexData.map(bib => generateCitationHTML(parseBibtex(bib))).join('');
    container.innerHTML = allCitationsHTML;
    
    container.addEventListener('click', function(event) {
        const button = event.target.closest('.copy-bibtex-btn');
        if (button) {
            copyBibtex(button);
        }
    });
});
</script>
```