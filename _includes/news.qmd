---
listing:
- id: news
  contents:
    - "news/posts/*/index.qmd"
  # max-items: 10
  sort: date desc
  type: grid
  grid-columns: 3
  categories: false
  sort-ui: false
  filter-ui: false
  fields: [title, description, date, reading-time, author]
  image-height: "200"
---

### News

::: {#news}
:::

[See all news &rarr;](news/)

```{=html}
<style>
  /* hide default Quarto grid once JS enhancement is active */
  #listing-news.enhanced-carousel .list.grid.quarto-listing-cols-3 {
    display: none !important;
  }

  #carousel-container {
    width: 100%;
    overflow: hidden;
    position: relative;
  }
  #carousel-container:focus {
    outline: 2px solid #007acc;
    outline-offset: 4px;
  }

  #carousel-track {
    display: flex;
    align-items: stretch; 
    transition: transform 0.7s cubic-bezier(0.25, 1, 0.5, 1);
    will-change: transform;
  }

  #carousel-track > .g-col-1 {
    flex: 0 0 33.3333%;
    padding: 1rem;
    box-sizing: border-box;
    display: block !important;
    min-width: 0;
  }

  /* Tablet/iPad size: 2 columns */
  @media (max-width: 1024px) and (min-width: 769px) {
    #carousel-track > .g-col-1 {
      flex: 0 0 50%;
    }
  }

  @media (max-width: 768px) {
    #carousel-track > .g-col-1 {
      flex: 0 0 100%;
    }
  }

  #carousel-track > .g-col-1 .card {
    background: none;
    box-shadow: none;
    border: none;
  }

  .quarto-listing {
    padding-bottom: 0 !important;
  }

  #carousel-track > .g-col-1 .card.news-item {
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  #carousel-track > .g-col-1 .card-body {
    flex-grow: 1;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  #carousel-track > .g-col-1 .card-img-top {
    max-height: 150px;
    object-fit: cover;
  }
  
  #carousel-track .listing-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
    
  #carousel-track .listing-description {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  #carousel-track .card-attribution {
    margin-top: auto;
    padding-top: 1rem;
    display: flex;
    align-items: flex-end;
    gap: 1em;
  }

  #carousel-track .listing-author {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    min-width: 0;
  }

  #carousel-track .listing-date {
    white-space: nowrap;
    flex-shrink: 0;
  }

</style>

<script>
  // The script block remains the same. No changes are needed here.
  document.addEventListener('DOMContentLoaded', function () {
    const listing = document.getElementById('listing-news');
    if (!listing) return;

    const originalItems = Array.from(
      listing.querySelectorAll('.list.grid.quarto-listing-cols-3 > .g-col-1')
    );
    const N_original = originalItems.length;

    originalItems.forEach(item => {
      const card = item.querySelector('.card');
      if (card) {
        card.classList.add('news-item');
      }
    });

    function getItemsPerView() {
      const width = window.innerWidth;
      if (width <= 768) {
        return 1;
      } else if (width > 768 && width <= 1024) {
        return 2;
      } else {
        return 3;
      }
    }

    if (N_original <= getItemsPerView()) {
      listing.classList.remove('enhanced-carousel');
      return;
    }

    listing.classList.add('enhanced-carousel');

    let carouselContainer = document.getElementById('carousel-container');
    let carouselTrack = document.getElementById('carousel-track');

    if (!carouselContainer) {
      carouselContainer = document.createElement('div');
      carouselContainer.id = 'carousel-container';
      carouselContainer.setAttribute('role', 'region');
      carouselContainer.setAttribute('aria-live', 'polite');
      carouselContainer.setAttribute('tabindex', '0');

      carouselTrack = document.createElement('div');
      carouselTrack.id = 'carousel-track';
      carouselContainer.appendChild(carouselTrack);
      listing.parentNode.insertBefore(carouselContainer, listing.nextSibling);
    } else {
        while(carouselTrack.firstChild) {
            carouselTrack.removeChild(carouselTrack.firstChild);
        }
    }

    let itemsPerView = getItemsPerView();
    const numClones = Math.max(itemsPerView, 1);

    const clonedItems = [];
    for (let i = 0; i < numClones; i++) {
        const clone = originalItems[i % N_original].cloneNode(true);
        clone.setAttribute('aria-hidden', 'true');
        clonedItems.push(clone);
    }

    originalItems.forEach(i => {
        carouselTrack.appendChild(i);
        i.setAttribute('aria-hidden', 'false');
    });
    clonedItems.forEach(i => carouselTrack.appendChild(i));

    const allItems = [...originalItems, ...clonedItems];

    allItems.forEach(item => {
      const titleElement = item.querySelector('.listing-title');
      if (titleElement) {
        titleElement.setAttribute('title', titleElement.textContent.trim());
      }
    });

    let currentIndex = 0;
    let shiftPercent = 100 / itemsPerView;
    const displayDuration = 2000;
    const transitionDuration = 700;

    function updateSlide(idx, instant = false) {
      if (instant) {
        carouselTrack.style.transition = 'none';
      } else {
        carouselTrack.style.transition = `transform ${transitionDuration / 1000}s cubic-bezier(0.25, 1, 0.5, 1)`;
      }

      carouselTrack.style.transform = `translateX(-${idx * shiftPercent}%)`;

      allItems.forEach((item, i) => {
          if (i >= currentIndex && i < currentIndex + itemsPerView) {
              item.setAttribute('aria-hidden', 'false');
          } else {
              item.setAttribute('aria-hidden', 'true');
          }
      });

      if (!instant && idx >= N_original) {
        setTimeout(() => {
          currentIndex = 0;
          updateSlide(currentIndex, true);
        }, transitionDuration);
      }
    }

    function nextSlide() {
      currentIndex++;
      updateSlide(currentIndex);
    }

    updateSlide(0);

    let intervalId = setInterval(nextSlide, displayDuration);
    ['mouseenter','focusin'].forEach(e =>
      carouselContainer.addEventListener(e, () => clearInterval(intervalId))
    );
    ['mouseleave','focusout'].forEach(e =>
      carouselContainer.addEventListener(e, () => {
        clearInterval(intervalId);
        intervalId = setInterval(nextSlide, displayDuration);
      })
    );
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) clearInterval(intervalId);
      else {
        clearInterval(intervalId);
        intervalId = setInterval(nextSlide, displayDuration);
      }
    });

    let resizeTimeout = null;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const newItemsPerView = getItemsPerView();

        if (newItemsPerView !== itemsPerView || N_original <= newItemsPerView) {
            clearInterval(intervalId);
            carouselContainer.remove();
            document.dispatchEvent(new Event('DOMContentLoaded'));
            return;
        }

        itemsPerView = newItemsPerView;
        shiftPercent = 100 / itemsPerView;
        currentIndex = Math.min(currentIndex, N_original - 1);
        updateSlide(currentIndex, true);
      }, 150);
    });
  });
</script>
```