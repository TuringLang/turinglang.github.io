---
listing:
- id: news
  contents:
    - "news/posts/*/index.qmd"
  # max-items: 10
  sort: date desc
  type: grid
  grid-columns: 3
  categories: false
  sort-ui: false
  filter-ui: false
  fields: [title, description, date, reading-time, author]
  image-height: "200"
  max-description-length: 100
---

### News

::: {#news}
:::

[See all news &rarr;](news/)

```{=html}
<style>
/* hide default Quarto grid once JS enhancement is active */
#listing-news.enhanced-carousel .list.grid.quarto-listing-cols-3 {
  display: none !important;
}

#carousel-container {
  overflow: hidden;
  cursor: grab;
}

#carousel-container.grabbing {
  cursor: grabbing;
}

#carousel-track {
  display: flex;
  align-items: stretch;
}

#carousel-track>.g-col-1 {
  flex: 0 0 33.3333%;
  padding: 1rem;
  box-sizing: border-box;
  display: block !important;
  min-width: 0;
}

#carousel-container.grabbing a {
  pointer-events: none;
}

@media (max-width: 1024px) and (min-width: 769px) {
  #carousel-track>.g-col-1 {
    flex: 0 0 50%;
  }
}

@media (max-width: 768px) {
  #carousel-track>.g-col-1 {
    flex: 0 0 100%;
  }
}

.quarto-listing {
  padding-bottom: 0 !important;
}

#carousel-track>.g-col-1 .card.news-item {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  height: 100%;
}

#carousel-track>.g-col-1 .card-body {
  flex-grow: 1;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

#carousel-track>.g-col-1 .card-img-top {
  max-height: 150px;
  object-fit: cover;
}

#carousel-track .listing-title {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

#carousel-track .listing-description {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  overflow: hidden;
  text-overflow: ellipsis;
}

#carousel-track .card-attribution {
  margin-top: auto;
  padding-top: 1rem;
  display: flex;
  align-items: flex-end;
  gap: 1em;
}

#carousel-track .listing-author {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  min-width: 0;
}

#carousel-track .listing-date {
  white-space: nowrap;
  flex-shrink: 0;
}
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const listing = document.getElementById('listing-news');
        if (!listing) return;

        const originalItems = Array.from(listing.querySelectorAll('.list.grid.quarto-listing-cols-3 > .g-col-1'));
        if (originalItems.length === 0) return;

        listing.classList.add('enhanced-carousel');

        const carouselContainer = document.createElement('div');
        carouselContainer.id = 'carousel-container';

        const carouselTrack = document.createElement('div');
        carouselTrack.id = 'carousel-track';

        carouselTrack.append(...originalItems);
        carouselContainer.append(carouselTrack);
        listing.parentNode.insertBefore(carouselContainer, listing.nextSibling);

        const slides = Array.from(carouselTrack.children);
        const displayDuration = 2500;
        let isDragging = false,
            startPos = 0,
            currentTranslate = 0,
            prevTranslate = 0,
            currentIndex = 0,
            hasDragged = false,
            intervalId;

        const getPositionX = (event) => event.type.includes('mouse') ? event.pageX : event.touches[0].clientX;
        const getItemsPerView = () => {
            const width = window.innerWidth;
            if (width <= 768) return 1;
            if (width > 768 && width <= 1024) return 2;
            return 3;
        }
        const stopAutoplay = () => clearInterval(intervalId);
        const startAutoplay = () => {
            stopAutoplay();
            intervalId = setInterval(autoplayNext, displayDuration);
        };

        const dragStart = (event) => {
            isDragging = true;
            hasDragged = false;
            startPos = getPositionX(event);
            const style = window.getComputedStyle(carouselTrack);
            const matrix = new DOMMatrix(style.transform);
            prevTranslate = matrix.m41;
            carouselContainer.classList.add('grabbing');
            carouselTrack.style.transition = 'none';
            stopAutoplay();
        };

        const dragMove = (event) => {
            if (!isDragging) return;
            hasDragged = true;
            const currentPosition = getPositionX(event);
            currentTranslate = prevTranslate + currentPosition - startPos;
            setSliderPosition();
        };

        const dragEnd = () => {
            if (!isDragging) return;
            isDragging = false;
            carouselContainer.classList.remove('grabbing');

            const slideWidth = slides[0].getBoundingClientRect().width;
            const movedBy = currentTranslate - prevTranslate;

            if (movedBy < -50 && currentIndex < slides.length - getItemsPerView()) {
                currentIndex++;
            }
            if (movedBy > 50 && currentIndex > 0) {
                currentIndex--;
            }

            setPositionByIndex();
        };

        const setSliderPosition = () => {
            const maxScroll = -(carouselTrack.scrollWidth - carouselContainer.clientWidth);
            currentTranslate = Math.max(maxScroll, Math.min(0, currentTranslate));
            carouselTrack.style.transform = `translateX(${currentTranslate}px)`;
        };

        const setPositionByIndex = () => {
            const slideWidth = slides[0].getBoundingClientRect().width;
            currentTranslate = currentIndex * -slideWidth;
            carouselTrack.style.transition = 'transform 0.4s ease-out';
            setSliderPosition();
        };

        const autoplayNext = () => {
            const itemsPerView = getItemsPerView();
            const maxIndex = slides.length - itemsPerView;
            currentIndex = (currentIndex >= maxIndex) ? 0 : currentIndex + 1;
            setPositionByIndex();
        };

        carouselTrack.addEventListener('click', (e) => {
            if (hasDragged) {
                e.preventDefault();
            }
        }, true);

        carouselContainer.addEventListener('mousedown', dragStart);
        carouselContainer.addEventListener('touchstart', dragStart, { passive: true });

        window.addEventListener('mousemove', dragMove);
        window.addEventListener('touchmove', dragMove, { passive: true });

        window.addEventListener('mouseup', dragEnd);
        window.addEventListener('touchend', dragEnd);

        carouselContainer.addEventListener('mouseenter', stopAutoplay);
        carouselContainer.addEventListener('mouseleave', startAutoplay);

        document.addEventListener('visibilitychange', () => document.hidden ? stopAutoplay() : startAutoplay());
        window.addEventListener('resize', () => window.location.reload());

        startAutoplay();
    });
</script>
```