<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Turing.jl</title>
<link>https://turinglang.org/news/</link>
<atom:link href="https://turinglang.org/news/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Thu, 17 Feb 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>Google Summer of Code 2022</title>
  <dc:creator>Kai Xu</dc:creator>
  <dc:creator>the TuringLang team</dc:creator>
  <link>https://turinglang.org/news/posts/2022-02-17-gsoc/</link>
  <description><![CDATA[ 




<p>It is another year of the <a href="https://summerofcode.withgoogle.com/">Google Summer of Code</a> time, and we have compiled an updated list of exciting Turing projects! Projects that the Turing team would be interested in working with students on over the summer are listed below. This information is also cross-posted at <a href="https://julialang.org/jsoc/gsoc/turing/">Julia’s Turing project page</a>.</p>
<p>If you are interested in exploring any of these projects or have any questions, please reach out to the listed project mentors. You can find their contact information at <a href="https://turinglang.org/stable/team">turinglang.org/team</a>.</p>
<section id="more-real-world-bayesian-models-in-turing-julia" class="level2">
<h2 class="anchored" data-anchor-id="more-real-world-bayesian-models-in-turing-julia">More real-world Bayesian models in Turing / Julia</h2>
<p><strong>Mentors</strong>: Kai Xu, Tor E. Fjelde, Hong Ge</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Project length</strong>: 175 hrs or 350 hrs</p>
<p><strong>Description</strong>: There are many real-world Bayesian models out there, and they deserve a Turing / Julia implementation.</p>
<p>Examples include but not limited to - Forecasting (<a href="https://facebook.github.io/prophet/">Prophet</a>, <a href="https://github.com/facebook/prophet/tree/main/examples">datasets</a>) - Recommender system (<a href="http://www.cs.utoronto.ca/~amnih/papers/pmf.pdf">probabilistic matrix factorisation</a>, <a href="https://grouplens.org/datasets/movielens/">dataset</a>) - Ranking (<a href="https://en.wikipedia.org/wiki/TrueSkill">TrueSkill</a>, <a href="https://github.com/dotnet/mbmlbook/tree/main/src/3.%20Meeting%20Your%20Match/Data">dataset</a>) - Bayesian revenue estimation (<a href="https://www.smartly.io/blog/tutorial-how-we-productized-bayesian-revenue-estimation-with-stan">example</a>) - Political forecasting model (<a href="https://github.com/sjwild/Canandian_Election_2021">example</a>) - Topic mining (latent Dirichlet allocation and new variants) - Multiple Annotators/Combining Unreliable Observations (Dawid and Skene, 1979)</p>
<p>For each model, we would consider the following tasks as part of a GSoC project: - Correctness test: correctness of the implementation can be tested by doing inference for prior samples, for which we know the ground truth latent variables. - Performance benchmark: this includes (i) time per MCMC step and (ii) time per effective sample; if the model is differentiable, a further break-down of (i) into (i.1) time per forward pass and (i.2) time per gradient pass are needed. - Real-world results: if available, the final step is to apply the model to a real-world dataset; if such an experiment has been done in the literature, consistency of inference results needs to be checked</p>
</section>
<section id="improving-the-integration-between-turing-and-turings-mcmc-inference-packages" class="level2">
<h2 class="anchored" data-anchor-id="improving-the-integration-between-turing-and-turings-mcmc-inference-packages">Improving the integration between Turing and Turing’s MCMC inference packages</h2>
<p><strong>Mentors</strong>: Cameron Pfiffer, Mohamed Tarek, David Widmann</p>
<p><strong>Project difficulty</strong>: Easy</p>
<p><strong>Project length</strong>: 175 hrs</p>
<p><strong>Description</strong>: Turing.jl is based on a set of inference packages maintained by the TuringLang group. This project is about making use of improvements in DynamicPPL to create a generic integration between Turing.jl and the AbstractMCMC.jl sampling API. The ultimate goal is to remove or substantially reduce algorithm-specific glue code inside Turing.jl. The project would also involve improving data structures for storing model parameters in DynamicPPL.</p>
</section>
<section id="directed-graphical-model-support-for-the-abstract-probabilistic-programming-library" class="level2">
<h2 class="anchored" data-anchor-id="directed-graphical-model-support-for-the-abstract-probabilistic-programming-library">Directed-graphical model support for the abstract probabilistic programming library</h2>
<p><strong>Mentors</strong>: Philipp Gabler, Hong Ge</p>
<p><strong>Project difficulty</strong>: Hard</p>
<p><strong>Project length</strong>: 350 hrs</p>
<p><strong>Description</strong>: We want to have a very light-weight representation of probabilistic models of static graphs (similar to BUGS), which can serve as a representation target of other front-end DSLs or be dynamically built. The representation should consist of the model and node representations (stochastic and deterministic, perhaps hyperparameters) and conform to the AbstractPPL model interface, with basic functions (evaluation of density, sampling, conditioning; at later stages some static analysis like extraction of Markov blankets). The model should also contain the state of the variables and implement the AbstractPPL trace interface (dictionary functions, querying of variable names). The result should be able to work with existing sampling packages through the abstract interfaces.</p>
</section>
<section id="a-modular-tape-caching-mechanism-for-reversediff" class="level2">
<h2 class="anchored" data-anchor-id="a-modular-tape-caching-mechanism-for-reversediff">A modular tape caching mechanism for ReverseDiff</h2>
<p><strong>Mentors</strong>: Qingliang Zhuo, Mohamed Tarek</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Project length</strong>: 175 hrs</p>
<p><strong>Description</strong>: Tape caching often leads to significant performance improvements for gradient-based sampling algorithms (e.g.&nbsp;HMC/NUTS). Tape caching is only possible at the complete computational level for ReverseDiff at the moment. This project is about implementing a more modular, i.e.&nbsp;function-as-a-caching-barrier, tape caching mechanism for ReverseDiff.jl.</p>
</section>
<section id="benchmarking-improving-performance-of-the-juliagaussianprocesses-libraries" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking-improving-performance-of-the-juliagaussianprocesses-libraries">Benchmarking &amp; improving performance of the JuliaGaussianProcesses libraries</h2>
<p><strong>Mentors</strong>: Theo Galy-Fajou, Will Tebbutt, ST John</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Project length</strong>: 350 hrs</p>
<p><strong>Description</strong>: Although KernelFunctions.jl has extensive correctness testing, our performance testing is lacking. This project aims to resolve this, and resolve performance issues wherever they are found. The student would first need to extend our existing benchmarking coverage, and debug any obvious performance problems. The next phase of the work would be to construct end-to-end examples of KernelFunctions being used in practice, profile them to determine where performance problems lie, and fix them.</p>
</section>
<section id="iterative-methods-for-inference-in-gaussian-processes" class="level2">
<h2 class="anchored" data-anchor-id="iterative-methods-for-inference-in-gaussian-processes">Iterative methods for inference in Gaussian Processes</h2>
<p><strong>Mentors</strong>: Will Tebbutt, S. T. John, Ross Viljoen</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Project length</strong>: 175 hrs</p>
<p><strong>Description</strong>: There has recently been quite a bit of work on inference methods for GPs that use iterative methods rather than the Cholesky factorisation. They look quite promising, but no one has implemented any of these within the Julia GP ecosystem yet, but they should fit nicely within the AbstractGPs framework. If you’re interested in improving the GP ecosystem in Julia, this project might be for you!</p>
</section>
<section id="approximate-inference-methods-for-non-gaussian-likelihoods-in-gaussian-processes" class="level2">
<h2 class="anchored" data-anchor-id="approximate-inference-methods-for-non-gaussian-likelihoods-in-gaussian-processes">Approximate inference methods for non-Gaussian likelihoods in Gaussian Processes</h2>
<p><strong>Mentors</strong>: S. T. John, Ross Viljoen, Theo Galy-Fajou</p>
<p><strong>Project difficulty</strong>: Hard</p>
<p><strong>Project length</strong>: 350 hrs</p>
<p><strong>Description</strong>: Adding <a href="https://github.com/JuliaGaussianProcesses/JuliaGaussianProcesses.github.io/discussions/5#discussioncomment-1627101">approximate inference</a> methods for non-Gaussian likelihoods which are available in other GP packages but not yet within JuliaGPs. The project would start by determining which approximate inference method(s) to implement—there’s lots to do, and we’re happy to work with a student on whichever method they are most interested in, or to suggest one if they have no strong preference.</p>
</section>
<section id="gpu-integration-in-the-juliagps-ecosystem" class="level2">
<h2 class="anchored" data-anchor-id="gpu-integration-in-the-juliagps-ecosystem">GPU integration in the JuliaGPs ecosystem</h2>
<p><strong>Mentors</strong>: Ross Viljoen, Theo Galy-Fajou, Will Tebbutt</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Project length</strong>: 350 hrs</p>
<p><strong>Description</strong>: This would involve first ensuring that common models are able to run fully on the GPU, then identifying and improving GPU-specific performance bottlenecks. This would begin by implementing a limited end-to-end example involving a GP with a standard kernel, and profiling it to debug any substantial performance bottlenecks. From there, support for a wider range of the functionality available in KernelFunctions.jl and AbstractGPs.jl can be added. Stretch goal: extension of GPU support to some functionality in ApproximateGPs.jl.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Blog</category>
  <category>GSoC</category>
  <guid>https://turinglang.org/news/posts/2022-02-17-gsoc/</guid>
  <pubDate>Thu, 17 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Google Summer of Code 2021</title>
  <dc:creator>Cameron Pfiffer</dc:creator>
  <link>https://turinglang.org/news/posts/2021-02-04-gsoc/</link>
  <description><![CDATA[ 




<p>It’s about time for us to start thinking about projects we’d like to see at Turing.jl for the <a href="https://summerofcode.withgoogle.com/">Google Summer of Code 2021</a>! Below is a list of projects the Turing team would be interested in working with students on for the summer.</p>
<p>If you are interested in exploring any of these projects, please reach out to the listed project mentors. You can find their contact information at <a href="https://turinglang.org/stable/team">turinglang.org/team</a>.</p>
<section id="mcmcchains-improvements" class="level1">
<h1>MCMCChains improvements</h1>
<p><strong>Mentors</strong>: Cameron Pfiffer, Hong Ge</p>
<p><strong>Project difficulty</strong>: Easy</p>
<p><strong>Description</strong>: MCMCChains is a key component of the Turing.jl ecosystem. It is the package that determines how to analyze and store MCMC samples provided by packages like Turing. It’s also used outside of Turing.</p>
<p>For this project, a student might improve the performance of the various statistical functions provided by MCMCChains, changing the back end to use a data storage format that maintains the shape of parameter samples, or improve the general plotting functionality of the package.</p>
<p>There’s lots of fun little things to do for MCMCChains. Check out this <a href="https://github.com/TuringLang/MCMCChains.jl/issues/246">meta-issue</a> for more details and discussions.</p>
</section>
<section id="particle-filtering-methods" class="level1">
<h1>Particle filtering methods</h1>
<p><strong>Mentors</strong>: Hong Ge, Cameron Pfiffer</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Description</strong>: Turing’s support for particle sampling methods is slowing being improved with the addition of <a href="https://github.com/TuringLang/AdvancedPS.jl">AdvancedPS.jl</a>. If you’re interested in implementing or improving particle sampling methods, this is a great project for you!</p>
</section>
<section id="nested-sampling" class="level1">
<h1>Nested Sampling</h1>
<p><strong>Mentors</strong>: Miles Lucas, Cameron Pfiffer, Hong Ge</p>
<p><strong>Project difficulty</strong>: Hard</p>
<p><strong>Description</strong>: <a href="https://github.com/TuringLang/NestedSamplers.jl">NestedSamplers.jl</a> is an excellent package which implements nested sampling methods. As of yet, it is not connected to Turing.jl. For this project, a student would connect the NestedSamplers.jl library to Turing.jl.</p>
</section>
<section id="gpu-acceleration" class="level1">
<h1>GPU acceleration</h1>
<p><strong>Mentors</strong>: Mohamed Tarek, Hong Ge, Kai Xu, Tor Fjelde</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Description</strong>: Turing’s native GPU support is limited in that the Metropolis-Hastings and HMC samplers do not implement GPU sampling methods. This can and should be done – GPU methods are awesome! If you are interested with working on parallelism and GPUs, this project is for you.</p>
<p>Students will work with the code at <a href="https://github.com/TuringLang/AdvancedMH.jl">AdvancedMH</a> or <a href="https://github.com/TuringLang/AdvancedHMC.jl">AdvancedHMC</a>, depending on their interests.</p>
</section>
<section id="documentation-and-tutorial-improvements" class="level1">
<h1>Documentation and tutorial improvements</h1>
<p><strong>Mentors</strong>: Cameron Pfiffer, Martin Trapp</p>
<p><strong>Project difficulty</strong>: Easy</p>
<p><strong>Description</strong>: Turing’s documentation and tutorials need a bit of an overhaul. Turing has changed significantly since the last time the documentation was written, and it’s beginning to show. Students would use their knowledge of probabilistic programming languages and Turing to shore-up or rewrite documentation and tutorials.</p>
</section>
<section id="iterative-methods-for-inference-in-gaussian-processes" class="level1">
<h1>Iterative Methods for Inference in Gaussian Processes</h1>
<p><strong>Mentors</strong>: Will Tebbutt, S. T. John, Theo Galy-Fajou</p>
<p><strong>Project difficulty</strong>: Medium</p>
<p><strong>Description</strong>: There has recently been quite a bit of work on inference methods for GPs that use iterative methods rather than the Cholesky factorisation. They look quite promising, but no one has implemented any of these within the Julia GP ecosystem yet, but they should fit nicely within the AbstractGPs framework. If you’re interested in improving the GP ecosystem in Julia, this project might be for you!</p>
</section>
<section id="implement-advanced-variational-gaussian-process-models" class="level1">
<h1>Implement advanced variational Gaussian process models</h1>
<p><strong><em>Mentors</em></strong>: ST John, Will Tebbutt, Theo Galy-Fajou</p>
<p><strong><em>Project difficulty</em></strong>: Easy to Medium</p>
<p><strong><em>Description</em></strong>: Sparse variational Gaussian process models provide the flexibility to scale to large datasets, handle arbitrary (non-conjugate) likelihoods, and to be used as building blocks for composite models such as deep GPs. This project is about making such models more readily available within the Julia GP ecosystem - depending on your interests you can focus on making it easier for end users and providing good tutorials, or on the implementations of these models to give us the same or better performance as with established Python packages such as GPflow, integrating with Flux.jl, etc.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Blog</category>
  <category>GSoC</category>
  <guid>https://turinglang.org/news/posts/2021-02-04-gsoc/</guid>
  <pubDate>Wed, 10 Feb 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Google Summer of Code 2020</title>
  <dc:creator>Cameron Pfiffer</dc:creator>
  <link>https://turinglang.org/news/posts/2020-09-11-gsoc/</link>
  <description><![CDATA[ 




<p>As the 2020 <a href="https://summerofcode.withgoogle.com/">Google Summer of Code</a> comes to a close, the Turing team thought it would be a good opportunity to reflect on the work that was done by our superb students this summer.</p>
<p><a href="https://github.com/SaranjeetKaur">Saranjeet Kaur</a>’s <a href="https://summerofcode.withgoogle.com/projects/#6567464390885376">project</a> focused primarily on expanding <a href="https://github.com/TuringLang/NestedSamplers.jl">NestedSamplers.jl</a>. NestedSamplers.jl now supports <a href="https://arxiv.org/abs/1506.00171">PolyChord-style</a> nested sampling natively, which is an absolute delight. Saranjeet wrote about this <a href="https://nextjournal.com/Saranjeet-Kaur/extending-nestedsamplersjl">here</a>. She also provided a good tutorial on how to use NestedSamplers.jl <a href="https://nextjournal.com/Saranjeet-Kaur/illustrations-of-use-of-nestedsamplersjl">here</a>. The NestedSamplers.jl integration with Turing is still on-going – integrating new samplers with Turing is one of the more difficult tasks. If you are interested to see the progress on this, check out the relevant <a href="https://github.com/TuringLang/Turing.jl/pull/1333">pull request</a>.</p>
<p><a href="https://github.com/luiarthur">Arthur Lui</a>’s <a href="https://summerofcode.withgoogle.com/projects/#5861616765108224">project</a> was to provide a much-needed set of benchmarks of Bayesian nonparametric models between Turing and other PPLs. Arthur’s work spawned a <a href="https://github.com/luiarthur/TuringBnpBenchmarks">GitHub repository</a> with good practices for benchmarking, as well as three blog posts with some (very cool!) statistics on Turing’s performance:</p>
<ol type="1">
<li><a href="https://luiarthur.github.io/TuringBnpBenchmarks/dpsbgmm">Dirichlet Process Gaussian mixture model via the stick-breaking construction in various PPLs</a></li>
<li><a href="https://luiarthur.github.io/TuringBnpBenchmarks/gp">Gaussian Process Regression Model in various PPLs</a></li>
<li><a href="https://luiarthur.github.io/TuringBnpBenchmarks/gpclassify">Gaussian Process Classification Model in various PPLs</a></li>
</ol>
<p>Finally, <a href="https://github.com/sharanry">Sharan Yalburgi</a> (a returning GSoC student) completed an epic amount of work Turing’s growing suite of <a href="https://summerofcode.withgoogle.com/projects/#5565948129443840">Gaussian process tools</a>. In particular, the GitHub organization <a href="https://github.com/JuliaGaussianProcesses">JuliaGaussianProcesses</a> was founded, and serves as an effort to build a robust Gaussian process framework for the Julia ecosystem. The framework consists of multiple GP related Julia packages:</p>
<ul>
<li><a href="https://github.com/JuliaGaussianProcesses/KernelFunctions.jl">KernelFunctions.jl</a> provides kernel functions for GPs as well as efficient AD for these kernels. KernelFunctions.jl also supports multi-output GPs by providing necessary data abstractions and multi-output kernels.</li>
<li><a href="https://github.com/JuliaGaussianProcesses/AbstractGPs.jl">AbstractGPs.jl</a> defines GP abstractions and provides exact posteriors. It provides support for induced points based GP posteriors and for efficient sequential/online (sparse) GP updates.</li>
<li><a href="https://github.com/JuliaGaussianProcesses/GPLikelihoods.jl">GPLikelihoods.jl</a> defines alternate likelihoods for Non-Gaussian GPs.</li>
<li><a href="https://github.com/JuliaGaussianProcesses/GPMLj.jl">GPMLj.jl</a> provides a Julia interface for <a href="https://github.com/GPflow/GPflow">GPFlow</a>, a GP library written in Python using TensorFlow.</li>
</ul>
<p>Special thanks to our three GSoC students for this summer, who all did excellent work. Additional thanks to Google for supporting open source software development and the Julia language!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Blog</category>
  <category>GSoC</category>
  <guid>https://turinglang.org/news/posts/2020-09-11-gsoc/</guid>
  <pubDate>Fri, 11 Sep 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Replication study: Estimating number of infections and impact of NPIs on COVID-19 in European countries (Imperial Report 13)</title>
  <dc:creator>Tor Erlend Fjelde</dc:creator>
  <dc:creator>Mohamed Tarek</dc:creator>
  <dc:creator>Kai Xu</dc:creator>
  <dc:creator>David Widmann</dc:creator>
  <dc:creator>Martin Trapp</dc:creator>
  <dc:creator>Cameron Pfiffer</dc:creator>
  <dc:creator>Hong Ge</dc:creator>
  <link>https://turinglang.org/news/posts/2020-05-04-Imperial-Report13-analysis/</link>
  <description><![CDATA[ 




<p>The Turing.jl team is currently exploring possibilities in an attempt to help with the ongoing SARS-CoV-2 crisis. As preparation for this and to get our feet wet, we decided to perform a replication study of the <a href="https://www.imperial.ac.uk/mrc-global-infectious-disease-analysis/covid-19/report-13-europe-npi-impact/">Imperial Report 13</a>, which attempts to estimate the real number of infections and impact of non-pharmaceutical interventions on COVID-19. In the report, the inference was performed using the probabilistic programming language (PPL) Stan. We have explicated their model and inference in Turing.jl, a Julia-based PPL. We believe the results and analysis of our study are relevant for the public, and for other researchers who are actively working on epidemiological models. To that end, our implementation and results are available <a href="https://github.com/cambridge-mlg/Covid19">here</a>.</p>
<p>In summary, we replicated the Imperial COVID-19 model using Turing.jl. Subsequently, we compared the inference results between Turing and Stan, and our comparison indicates that results are reproducible with two different implementations. In particular, we performed 4 sets of simulations using the Imperial COVID-19 model. The resulting estimates of the expected real number of cases, in contrast to the <em>recorded</em> number of cases, the reproduction number \(R_t\), and the expected number of deaths as a function of time and non-pharmaceutical interventions (NPIs) for each Simulation are shown below.</p>
<!-- {{< include plotly.html >}} -->
<div id="simulation-1-full" class="plotly">

</div>
<script>
 Plotly.d3.json("data/full_prior.json", function(err, fig) {
   Plotly.plot("simulation-1-full", fig.data, fig.layout, {responsive: true});
 });
</script>
<p><strong>Simulation (a):</strong> hypothetical Simulation from the model without data (prior predictive) or non-pharmaceutical interventions. Under the prior assumptions of the Imperial Covid-19 model, there is a very wide range of epidemic progressions with expected cases from almost 0 to 100% of the population over time. The black bar corresponds to the date of the last observation. Note that \(R_t\) has a different time-range than the other plots; following the original report, this shows the 100 days following the country-specific <code>epidemic_start</code> which is defined to be 31 days prior to the first date of 10 cumulative deaths, while the other plots show the last 60 days.</p>
<div id="simulation-2-full" class="plotly">

</div>
<script>
 Plotly.d3.json("data/full_posterior.json", function(err, fig) {
   Plotly.plot("simulation-2-full", fig.data, fig.layout, {responsive: true});
 });
</script>
<p><strong>Simulation (b):</strong> future Simulation with non-pharmaceutical interventions kept in place (posterior predictive). After incorporating the observed infection data, we can see a substantially more refined range of epidemic progression. The reproduction rate estimate lies in the range of 3.5-5.6 before any intervention is introduced. The dotted lines correspond to observations, and the black bar corresponds to the date of the last observation.</p>
<div id="simulation-3-full" class="plotly">

</div>
<script>
 Plotly.d3.json("data/full_counterfactual.json", function(err, fig) {
   Plotly.plot("simulation-3-full", fig.data, fig.layout, {responsive: true});
 });
</script>
<p><strong>Simulation (c):</strong> future Simulation with non-pharmaceutical interventions removed. Now we see the hypothetical scenarios after incorporating infection data, but with non-pharmaceutical interventions removed. This plot looks similar to Simulation (a), but with a more rapid progression of the pandemic since the estimated reproduction rate is bigger than the prior assumptions. The dotted lines correspond to observations, and the black bar corresponds to the date of the last observation.</p>
<div id="simulation-4-full" class="plotly">

</div>
<script>
 Plotly.d3.json("data/full_counterfactual2.json", function(err, fig) {
   Plotly.plot("simulation-4-full", fig.data, fig.layout, {responsive: true});
 });
</script>
<p><strong>Simulation (d):</strong> future Simulation with when <code>lockdown</code> is lifted two weeks before the last observation (predictive posterior). As a result there is a clear, rapid rebound of the reproduction rate. Comparing with Simulation (b) we do not observe an <em>immediate</em> increase in the number of expected cases and deaths upon lifting lockdown, but there is a significant difference in the number of cases and deaths in the last few days in the plot: Simulation (d) results in both greater number of cases and deaths, as expected. This demonstrates how the effects of lifting an intervention might not become apparent in the measurable variables, e.g.&nbsp;deaths, until several weeks later. The dotted lines correspond to observations, the black bar corresponds to the date of the last observation, and the red bar indicates when <code>lockdown</code> was lifted.</p>
<p>Overall, Simulation (a) shows the prior modelling assumptions, and how these prior assumptions determine the predicted number of cases, etc. before seeing any data. Simulation (b) predicts the trend of the number of cases, etc. using estimated parameters and by keeping all the non-pharmaceutical interventions in place. Simulation (c) shows the estimate in the case where none of the intervention measures are ever put in place. Simulation (d) shows the estimates in the case when the lockdown was lifted two weeks prior to the last observation while keeping all the other non-pharmaceutical interventions in place.</p>
<p>We want to emphasise that we do not provide additional analysis of the Imperial model yet, nor are we aiming to make any claims about the validity or the implications of the model. Instead we refer to Imperial Report 13 for more details and analysis. The purpose of this post is solely to add validation to the <em>inference</em> performed in the paper by obtaining the same results using a different probabilistic programming language (PPL) and by exploring whether or not Turing.jl can be useful for researchers working on these problems.</p>
<p>For our next steps, we’re looking at collaboration with other researchers and further developments of this and similar models. There are some immediate directions to explore:</p>
<ol type="1">
<li>Incorporation of more sources of data, e.g.&nbsp;national mobility, seasonal changes and behavior changes in individuals.</li>
<li>How the assumptions incorporated into the priors and their parameters change resulting posterior.</li>
<li>The current model does not directly include recovery as a possibility and assumes that if a person has been infected once then he/she will be infectious until death. Number of recovered cases suffers from the same issues as the number of cases: it cannot be directly observed. But we can also deal with it in a similar manner as is done with number of cases and incorporate this into the model for a potential improvement. This will result in a plethora of different models from which we can select the most realistic one using different model comparison techniques, e.g.&nbsp;leave-one-out cross-validation (loo-cv).</li>
</ol>
<p>Such model refinement can be potentially valuable given the high impact of this pandemic and the uncertainty and debates in the potential outcomes.</p>
<p><strong>Acknowledgement</strong> <em>We would like to thank the Julia community for creating such an excellent platform for scientific computing, and for the continuous feedback that we have received. We also thank researchers from Computational and Biological Laboratory at Cambridge University for their feedback on an early version of the post.</em> <!----- Footnotes -----></p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Research</category>
  <guid>https://turinglang.org/news/posts/2020-05-04-Imperial-Report13-analysis/</guid>
  <pubDate>Thu, 14 May 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Google Summer of Code/Julia Summer of Code</title>
  <dc:creator>Cameron Pfiffer</dc:creator>
  <link>https://turinglang.org/news/posts/2020-02-12-jsoc/</link>
  <description><![CDATA[ 




<p>Last year, Turing participated in the Google Summer of Code (GSoC) through the Julia language organization. It was a fun time, and the project was better for it. Turing plans to participate in the upcoming GSoC, and we wanted to outline some potential projects and expectations we have for applicants.</p>
<p>If you are not aware, Google provides funds to students around the world to develop a project of their choice over the summer. Students receive funds from Google and spend three months on any open source project.</p>
<p>The Turing development team has prepared a list of possible projects that we have deemed valuable to the project and easy enough that it could feasibly be created in the three-month limit. This list is not exclusive – if you have a good idea, you can write it up in your proposal, though it is recommend that you reach out to any of the Turing team on Julia’s <a href="https://julialang.slack.com/">Slack</a> (you can get an invite <a href="https://slackinvite.julialang.org/">here</a>) or <a href="https://discourse.julialang.org/c/domain/probprog">Discourse</a>. Messages on Discourse should be posted to the “Probabilistic programming” category – we’ll find you!</p>
<p>Possible project ideas:</p>
<ul>
<li><strong>Benchmarking</strong>. Turing’s performance has been sporadically benchmarked against various other probabilistic programming languages (e.g.&nbsp;Turing, Stan, PyMC3, TensorFlow Prob), but a systemic approach to studying where Turing excels and where it falls short would be useful. A GSoC student would implement identical models in many PPLs and build tools to benchmark all PPLs against one another.</li>
<li><strong>Nested sampling integration</strong>. Turing focuses on modularity in inference methods, and the development team would like to see more inference methods, particularly the popular nested sampling method. A Julia package (<a href="https://github.com/mileslucas/NestedSamplers.jl">NestedSamplers.jl</a>) but it is not hooked up to Turing and does not currently have a stable API. A GSoC student would either integrate that package or construct their own nested sampling method and build it into Turing.</li>
<li><strong>Automated function memoization by model annotation</strong>. Function memoization is a way to reduce costly function evaluation by caching the output when the same inputs are given. Turing’s Gibbs sampler often ends up <a href="https://turinglang.org/dev/docs/using-turing/performancetips#reuse-computations-in-gibbs-sampling">rerunning expensive functions</a> multiple times, and it would be a significant performance improvement to allow Turing’s model compiler to automatically memoize functions where appropriate. A student working on this project would become intimately familiar with Turing’s model compiler and build in various automated improvements.</li>
<li><strong>Making Distributions GPU compatible</strong>. Julia’s GPU tooling is generally quite good, but currently Turing is not able to reliably use GPUs while sampling because <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a> is not GPU compatible. A student on this project would work with the Turing developers and the Distributions developers to allow the use of GPU parallelism where possible in Turing.</li>
<li><strong>Static distributions</strong>. Small, fixed-size vectors and matrices are fairly common in Turing models. This means that sampling in Turing can probably benefit from using statically sized vectors and matrices from <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> instead of the dynamic normal Julia arrays. Beside the often superior performance of small static vectors and matrices, static arrays are also automatically compatible with the GPU stack in Julia. Currently, the main obstacle to using StaticArrays.jl is that distributions in <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a> are not compatible with StaticArrays. A GSoC student would adapt the multivariate and matrix-variate distributions as well as the univariate distribution with vector parameters in Distributions.jl to make a spin-off package called StaticDistributions.jl. The student would then benchmark StaticDistributions.jl against Distributions.jl and showcase an example of using StaticDistributions.jl together with <a href="https://github.com/JuliaGPU/CuArrays.jl">CuArrays.jl</a> and/or <a href="https://github.com/JuliaGPU/CUDAnative.jl">CUDAnative.jl</a> for GPU-acceleration.</li>
<li><strong>GPnet extensions</strong>. One of Turing’s satellite packages, <a href="https://github.com/TuringLang/GPnet.jl">GPnet</a>, is designed to provide a comprehensive suite of Gaussian process tools. See <a href="https://github.com/TuringLang/GPnet.jl/issues/2">this issue</a> for potential tasks – there’s a lot of interesting stuff going on with GPs, and this task in particular may have some creative freedom to it.</li>
<li><strong>Better chains and model diagnostics</strong>. One package that Turing (and many others) rely on heavily is <a href="https://github.com/TuringLang/MCMCChains.jl">MCMCChains.jl</a>, a package designed to format, store, and analyze parameter samples generated during MCMC inference. MCMCChains is currently showing its age a little and has many <a href="https://github.com/TuringLang/MCMCChains.jl/issues/171">bad design choices</a> that need to be fixed. Alternatively, a student could construct a far more lightweight chain system.</li>
<li><strong>Model comparison tools</strong>. Turing and its satellite packages do not currently provide a comprehensive suite of model comparison tools, a critical tool for the applied statistician. A student who worked on this project would implement various model comparison tools like <a href="https://mc-stan.org/loo/">LOO and WAIC</a>, among others.</li>
<li><strong>MLE/MAP tools</strong>. <a href="https://en.wikipedia.org/wiki/Maximum_likelihood_estimation">Maximum likelihood estimates</a> (MLE) and <a href="https://en.wikipedia.org/wiki/Maximum_a_posteriori_estimation">maximum a posteriori</a> (MAP) estimates can currently only be done by users through a <a href="https://turinglang.org/dev/docs/using-turing/advanced#maximum-a-posteriori-estimation">clunky set of workarounds</a>. A streamlined function like <code>mle(model)</code> or <code>map(model)</code> would be very useful for many of Turing’s users who want to see what the MLE or MAP estimates look like, and it may be valuable to allow for functionality that allows MCMC sampling to begin from the MLE or MAP estimates. Students working on this project will work with optimization packages such as <a href="https://github.com/JuliaNLSolvers/Optim.jl">Optim.jl</a> to make MLE and MAP estimation straightforward for Turing models.</li>
<li><strong>Particle sampler improvements</strong>. Turing’s development team has spent a lot of time and energy to make inference methods more modular, but Turing’s particle samplers have not yet been modernized and spun off into a separate package. Two packages that resulted from this were <a href="https://github.com/TuringLang/AdvancedHMC.jl">AdvancedHMC</a> for Hamiltonian MCMC methods, and <a href="https://github.com/TuringLang/AdvancedMH.jl">AdvancedMH</a> for Metropolis-Hastings style inference methods. A student who worked on this project would become very familiar with Turing’s inference backend and with particle sampling methods. This is a good project for people who love making things efficient and easily extendable.</li>
</ul>
<p>Other projects are welcome, but we do strongly recommend discussing any potential projects with members of the Turing team, as they will end up mentoring GSoC students for the duration of the project.</p>
<p>We’re looking forward to what people are interested in!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Blog</category>
  <category>GSoC</category>
  <guid>https://turinglang.org/news/posts/2020-02-12-jsoc/</guid>
  <pubDate>Wed, 12 Feb 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Turing’s Blog</title>
  <dc:creator>Cameron Pfiffer</dc:creator>
  <link>https://turinglang.org/news/posts/2019-12-14-initial-post/</link>
  <description><![CDATA[ 




<p>All good open source projects should have a blog, and Turing is one such project. Later on, members of the Turing team may be populating this feed with posts on topics like</p>
<ul>
<li>Interesting things you can do with Turing, or interesting things we have seen others do.</li>
<li>Development updates and major release announcements.</li>
<li>Research updates.</li>
<li>Explorations of Turing’s internals.</li>
<li>Updates to Turing’s satellite projects <a href="https://github.com/TuringLang/AdvancedHMC.jl">AdvancedHMC.jl</a> or <a href="https://github.com/TuringLang/Bijectors.jl">Bijectors.jl</a>.</li>
</ul>
<p>Stay tuned!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Blog</category>
  <guid>https://turinglang.org/news/posts/2019-12-14-initial-post/</guid>
  <pubDate>Sat, 14 Dec 2019 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
